#!/bin/bash
#http://viajemotu.wordpress.com/2012/08/13/kernel-ck-for-ubuntu-precise/
#https://github.com/chilicuil/learn/blob/master/sh/kernel-ck-ubuntu

# $ time bash kernel-ck-ubuntu

# 3.11
kernel=3.11
#patch de atualização
patchkernel=3.11.4
#patch pf
patchpf=3.11.4-pf
#sufixo
ckk=pf
#arch
arqt=$(dpkg --print-architecture)
#####################################

####################################################################################################################################
##############################################DO NOT EDIT BELOW UNLESS YOU KNOW WHAT YOU'RE DOING###################################
####################################################################################################################################

#the /tmp partitions usually have noexec
tmp_path="$HOME/.tmp/kernel-pf-ubuntu-$patchkernel"
curr_path=$PWD
apps_default="kernel-package gcc-4.8 libncurses5 libncurses5-dev build-essential patch fakeroot bc"

CL=$(echo $(grep -c processor /proc/cpuinfo))

trap _cleanup SIGINT SIGTERM #trap ctrl-c

_header()
{
    clear
    echo -e "\033[1m-------------------------------\033[7m $0 $patchkernel \033[0m\033[1m------------------------------\033[0m"
    echo -e "\033[1m  Original:\033[0m        http://sourceforge.net/projects/scriptkernel/"
    echo -e "\033[1m  Inspired by:\033[0m     http://omicron.homeip.net/projects/#easy_e17.sh"
    echo -e "\033[1m  Updates:\033[0m         https://github.com/chilicuil/learn/blob/master/sh/kernel-ck-ubuntu"
    echo -e "\033[1m  Modified for -pf kernel by Stefanescu Cristian"
    echo    "                                 send your push request!"
    echo
    echo -e "\033[1m  Patches:\033[0m         -pf"
    echo
    echo -e "\033[1m----------------\033[7m Current Configuration: edit the script to change them \033[0m\033[1m--------------\033[0m"
    echo "  build path:         $tmp_path"
    echo "  kernel:             $patchkernel"
    echo "  -pf patchset:       $patchpf"
    echo "  sufix:              $ckk"
    echo "  arch:               $arqt"
    echo "  concurrency level:  $CL"
    echo -e "\033[1m-------------------------------------------------------------------------------------\033[0m"
}

_cmd()
{   #print current command, exits on fail
    [ -z "$1" ] && return 0

    echo "    $ $@"
    $@

    status=$?
    [ "$status" != 0 ] && exit $status || return
}

_cmdsudo()
{   #print current command, exits on fail
    [ -z "$1" ] && return 0

    echo "    $ sudo $@"
    echo "$sudopwd" | $sudocmd $@

    status=$?
    [ "$status" != 0 ] && exit $status || return
}

_handscui()
{
    [ -z $1 ] && { printf "%5s\n" ""; return 1; }
    pid=$1
    animation_state=1

    if [ ! "$(ps -p $pid -o comm=)" ]; then
        printf "%5s\n" ""
        return
    fi

    printf "%s" "      "

    while [ "`ps -p $pid -o comm=`" ]; do
        echo -e -n "\b\b\b\b\b"
        case $animation_state in
            1)
                printf "%s" '\o@o\'
                animation_state=2
                ;;
            2)
                printf "%s" '|o@o|'
                animation_state=3
                ;;
            3)
                printf "%s" '/o@o/'
                animation_state=4
                ;;
            4)
                printf "%s" '|o@o|'
                animation_state=1
                ;;
        esac
        sleep 1
    done
    printf "%b" "\b\b\b\b\b" && printf "%5s\n" ""
}

_getroot()
{   #get sudo's password, define $sudopasswd and $sudocmd

    local tmp_path="/tmp"; local sudotest; local insudoers;

    if [ ! "$LOGNAME" = root ]; then
        echo "Detecting user $LOGNAME (non-root) ..."
        echo "Checking if sudo is available ..."
        sudotest=`type sudo &>/dev/null ; echo $?`

        if [ "$sudotest" = 0 ]; then
            echo "    Requesting sudo's password, I'll be carefull I promise =)"
            sudo -K
            if [ -e "$tmp_path/sudo.test" ]; then
                rm -f "$tmp_path/sudo.test"
            fi
            while [ -z "$sudopwd" ]; do
                echo -n "    - enter sudo-password: "
                stty -echo
                read sudopwd
                stty echo

                # password check
                echo "$sudopwd" | sudo -S touch "$tmp_path/sudo.test" > "$tmp_path/sudo.output" 2>&1
                insudoers=$(grep -i "sudoers" "$tmp_path/sudo.output")
                if [ -n "$insudoers" ]; then
                    echo "$sudopwd" | sudo -S rm "$tmp_path/sudo.output" > /dev/null 2>&1
                    exit
                fi

                if [ ! -e "$tmp_path/sudo.test" ]; then
                    sudopwd=""
                fi
            done

            sudocmd="/usr/bin/sudo -S"

            echo "$sudopwd" | $sudocmd rm -f "$tmp_path/sudo.test" > /dev/null 2>&1
            echo
        else
            echo "You're not root and sudo isn't available. Please run this script as root!"
            exit
        fi
    fi
}

_cleanup()
{
    stty echo
    echo -e "\033[1m-------------------\033[7m Cleanup \033[0m\033[1m-------------------\033[0m"
    echo "[+] deleting files at $tmp_path ... "
    #echo "$sudopwd" | $sudocmd rm -v $tmp_path/patch*
    #echo "$sudopwd" | $sudocmd rm -v $tmp_path/*.patch
    echo "$sudopwd" | _cmd $sudocmd rm -rf $tmp_path/linux-$patchkernel-$ckk

    #echo "$sudopwd" | $sudocmd mount -o remount /tmp
    #rm -rf $tmp_path 2>/dev/null
    if [ -z $1 ]; then
        exit
    fi
}

_waitfor()
{
    [ -z $1 ] && return 1

    echo -n "    $ $@ ..."
    $@ > /dev/null 2>&1 &
    sleep 1s

    _handscui $(pidof $1)
}

_waitforsudo()
{
    [ -z "$1" ] && return 1

    echo -n "    $ sudo $@ ..."
    echo "$sudopwd" | $sudocmd $@ > /dev/null 2>&1 &
    sleep 1s

    _handscui $(pidof $1)
}

_header
_getroot

echo -e "\033[1m--------------------------------\033[7m Fixing dependencies \033[0m\033[1m--------------------------------\033[0m"
#_waitforsudo apt-get update
#_waitforsudo apt-get install --no-install-recommends -y $apps_default


echo -e "\033[1m--------------------------------\033[7m Downloading archives \033[0m\033[1m-------------------------------\033[0m"
echo "[+] downloading main vanilla kernel tree ..."
_cmd mkdir -p $tmp_path
_cmd cd $tmp_path
_waitfor wget --no-check-certificate -N http://www.kernel.org/pub/linux/kernel/v3.x/linux-$kernel.tar.bz2

echo "[+] downloading -pf patch"
_waitfor wget -N https://pf.natalenko.name/sources/$kernel/patch-$patchkernel-pf.bz2

echo -e "\033[1m-----------------------------\033[7m Applying the patches \033[0m\033[1m------------------------------\033[0m"
echo "[+] uncompresing kernel to $tmp_path/linux-$kernel/ ..."
if [ ! -d "/$tmp_path/linux-$kernel/" ]; then
    _waitfor tar -jxpf $tmp_path/linux-$kernel.tar.bz2
fi

echo "[+] uncompresing patches ..."
_waitfor bunzip2 patch-$patchpf.bz2

echo "[+] moving to $tmp_path/linux-$patchkernel-$ckk"
_waitfor rm -rf linux-$patchkernel-$ckk
_waitfor cp -r "linux-$kernel" "linux-$patchkernel-$ckk"
_cmd cd linux-$patchkernel-$ckk
_cmd echo

echo "[+] applying patches (verbose output) ..."
_cmd patch -p1 < ../patch-$patchpf
_cmd echo

#tmp fix for bug #663474
#http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=663474
if [ $arqt == "i386" ]; then
    sed -i "/CONFIG_LGUEST_GUEST/d" .config
elif [ $arqt == "amd64" ]; then
    if [ ! -d ./arch/amd64  ]; then
        cd arch
        ln -s x86 amd64
        cd -
    fi
fi

cp ~/Desktop/config .config
#thanks StefanescuCristian: https://github.com/chilicuil/learn/commit/c2d44556101f997d70eac4c5536ea241363ee63c#commitcomment-2390064
echo "[+] making sure BFS and BFQ are enabled in config"
sed -i "/CONFIG_SCHED_CFS=y/d" .config
sed -i "s/# CONFIG_SCHED_BFS is not set/CONFIG_SCHED_BFS=y/g" .config
sed -i "s/# CONFIG_IOSCHED_BFQ is not set/CONFIG_IOSCHED_BFQ=y/g" .config
sed -i "s/CONFIG_DEFAULT_CFQ=y/# CONFIG_DEFAULT_CFQ is not set/g" .config
sed -i "s/CONFIG_DEFAULT_DEADLINE=y/# CONFIG_DEFAULT_DEADLINE is not set/g" .config
sed -i "s/CONFIG_DEFAULT_NOOP=y/# CONFIG_DEFAULT_NOOP is not set/g" .config
sed -i "s/CONFIG_DEFAULT_IOSCHED="cfq"/CONFIG_DEFAULT_IOSCHED="bfq"/g" .config
sed -i "s/CONFIG_DEFAULT_IOSCHED="deadline"/CONFIG_DEFAULT_IOSCHED="bfq"/g" .config
sed -i "s/CONFIG_DEFAULT_IOSCHED="noop"/CONFIG_DEFAULT_IOSCHED="bfq"/g" .config
sed -i "s/# CONFIG_DEFAULT_BFQ is not set/CONFIG_DEFAULT_BFQ=y/g" .config


echo -e "\033[1m-----------------------------\033[7m Compiling kernel \033[0m\033[1m----------------------------------\033[0m"

echo "[+] running make-kpkg ...    "
CONCURRENCY_LEVEL=$CL
echo | _cmd fakeroot make-kpkg --initrd kernel_image kernel_headers modules_image
_cmd echo

echo -e "\033[1m-------------------------------------\033[7m DONE \033[0m\033[1m----------------------------------\033[0m"
echo "[+] copying debs files ..."
_cmd cp -v ../linux-*.deb "$curr_path"
echo "[+] you may want to install the generated packages and reboot your system, run: $ sudo dpkg -i linux-*.deb"
echo "[+] have fun ^_^!"

#echo "$sudopwd" | $sudocmd dpkg -i ../*.deb

_cleanup 1

